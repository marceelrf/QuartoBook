---
engine: knitr
---

# Primeiros passos {.unnumbered}

## Configurações de sistema

Antes de iniciarmos o tutorial, é imperativo garantir que o sistema atenda às configurações mínimas para uma experiência estável. Utilizaremos sistema Linux. Recomenda-se que a máquina disponha de, no mínimo, 40 GB de armazenamento, 8 GB de memória RAM e um processador i5/i7 ou compatível. No entanto, para uma performance ideal e considerando o potencial de expansão das aplicações, encorajamos a utilização de um sistema com mais de 60 GB de armazenamento e, no mínimo, 16 GB de memória RAM. Essas configurações mais robustas assegurarão não apenas a instalação suave do software, mas também a capacidade de executar múltiplas aplicações de forma eficiente, proporcionando uma experiência mais fluida e responsiva ao usuário.

## Softwares necessários {#sec-softwares-necessários}

### Usuários Windows

-   [WSL](https://learn.microsoft.com/pt-br/windows/wsl/install) (Windows Subsystem for Linux)
-   [IGV](https://data.broadinstitute.org/igv/projects/downloads/2.16/IGV_Win_2.16.2-WithJava-installer.exe) [@robinson2011]
-   [FASTQC](https://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.12.1.zip)
-   [notepad++](https://notepad-plus-plus.org/downloads/)

::: {.callout-tip collapse="true"}
## Tutorial para instalar o `WSL`

Siga o tutorial da microsoft para instalar o `WSL`.

<https://learn.microsoft.com/pt-br/windows/wsl/install>
:::

### No Ubuntu

-   [IGV](https://software.broadinstitute.org/software/igv/download) [@robinson2011]
-   [FASTQC](https://github.com/s-andrews/FastQC)
-   [Trimmomatic](https://github.com/usadellab/Trimmomatic) [@bolger2014]
-   [bwa](https://github.com/lh3/bwa) [@li2013]
-   [minimap2](https://github.com/lh3/minimap2) [@li2018; @li2021]
-   [samtools](https://github.com/samtools/samtools) [@danecek2021]
-   [freebayes](https://github.com/freebayes/freebayes) [@garrison2012]
-   [vcftools](https://github.com/vcftools/vcftools) [@danecek2011]
-   [bcftools](https://github.com/samtools/bcftools) [@danecek2021]
-   [NanoPlot](https://github.com/wdecoster/NanoPlot) [@decoster2023]
-   [chopper](https://github.com/wdecoster/chopper) [@decoster2023]
-   [HipSTR](https://hipstr-tool.github.io/HipSTR/) [@willems2017]
-   [gzip](https://www.gnu.org/software/gzip/)

## Instalação

::: {.callout-warning title="Usuários windows"}
Usuários windows precisam instalar o Subsistema Windows para Linux (`WSL`).\
Os softwares `FASTQC` e `IGV` precisam ser instalados no windows e **não no `WSL`**.

Anote a `senha` que você configurou. Ela será fundamental durante o uso do `WSL`!!!!
:::

Ao terminar a instalação do `WSL` e de configurar seu usuário no linux utilize os seguintes comandos:

```{bash,eval=FALSE}
sudo apt-get update

sudo apt-get upgrade
```

Estes comandos irão garantir que o seu sistema esteja atualizado.

::: callout-caution
## Sobre o comando `sudo`

O comando `sudo` permite ao usuário executar comandos com permissão superior. Para isso você precisará da sua **senha** (ou do administrador)!
:::

Para instalar softwares no linux (diretamente ou no `WSL`) utilize o comando `apt install` da seguinte forma:

```{bash, eval=F}
sudo apt install [SOFTWARE]
```

## Instalando via CONDA

Usar o CONDA para criar um ambiente garante que todos os participantes estejam utilizando exatamente os mesmos programas e versões, evitando problemas que podem surgir por diferenças entre os computadores. Assim, você terá todas as ferramentas necessárias instaladas de forma organizada e padronizada, facilitando o acompanhamento durante o workshop, mesmo se você não tiver muita experiência com a instalação de programas. Isso ajuda a garantir que todos possam focar no conteúdo sem se preocupar com configurações complicadas.

### Instalando o CONDA via Miniconda

Utilize os comandos a baixo

```{bash}
#| eval: false

cd ~

mkdir -p ~/miniconda3

wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh

bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3

rm -rf ~/miniconda3/miniconda.sh

~/miniconda3/bin/conda init bash

~/miniconda3/bin/conda init zsh
```

Reinicie o sistema. No **WSL** é só fechar a abrir novamente.

Baixe o arquivo de configuração do CONDA para o Workshop clicando [aqui](https://1drv.ms/u/s!Aug0fBvVf82yj5dTJujT9quiT53bfA?e=sYzYD0).

### Crie e ative o ambiente

```{bash}
#| eval: false

conda env create -f workshopbioinfo.yml

conda activate workshopbioinfo
```

### Instale o HipSTR

~~Infelizmente~~ O HipSTR não está disponível para instalação via CONDA. Então faremos manualmente. Para isso primeiro vamos clonar o repositório do github com os códigos. Para garantir reprodutibilidade vamos fazer isso na pasta home. O comando abaixo entra na pasta home.

```{bash}
#| eval: false
cd ~
```

Em seguida vamos clonar o repositório:

```{bash}
#| eval: false
git clone https://github.com/HipSTR-Tool/HipSTR
```

Entramos na pasta HipSTR e fazemos a instalação com `make`.

```{bash}
#| eval: false
cd HipSTR

make
```

Para rodar o HipSTR:

```{bash}
#| eval: false
./HipSTR --help
```

## Dados utilizados {#sec-dados-utilizados}

Baixe os dados que serão utilizados neste workshop via [**OneDrive**](https://1drv.ms/f/s!Aug0fBvVf82yjvkrB5R-N_v3rFDHzg?e=FtqWjx);

::: {.callout-important title="Utilize o email correto"}
Para ter acesso aos dados utilize o email que foi fornecido durante a inscrição no evento. Em caso de erro, entre em contato com a organização.

Os dados totalizam \~20 GB. **Atente-se para isso!!!**
:::

As amostras utilizadas neste curso foram sequenciadas pelo projeto 1000 genomas.

```{r}
#| echo: false
#| message: false
#| warning: false

library(tidyverse)

# tbl <- clipr::read_clip_tbl()
# readr::write_tsv(tbl,file = "amostras.tsv")
tbl <- read_tsv(file = "amostras.tsv")

knitr::kable(tbl)
```

Os dados estão contidos nesta estrutura de pastas descritas a baixo:

**WorkshopBioinfo2024/**

**├── Genome/**

**├── R10/**

**│ ├── fastq/**

**│ └── bam/**

**├── Exome_ShortReads/**

**│ ├── fastq/**

**│ └── bam/**

**├── WGS_ShortReads/**

**│ ├── fastq/**

**│ └── bam/**

**└── SimulatedReads/**

                                

<!-- ::: callout-tip -->

<!-- ## Dicas -->

<!-- Utilize o comando `htop` para monitorar o consumo de memória em seu computador durante todas as atividades deste tutorial. -->

<!-- Utilize os argumento `-h` ou `--help` para visualizar ajuda sobre o uso dos softwares via terminal. -->

<!-- `SOFTWARE -h` -->

<!-- Adicionar o comando `time` antes de rodar os códigos, para saber o tempo que demorou, irá te ajudar a se programar para atividades futuras. -->

<!-- `time [COMANDOS...]` -->

<!-- ::: -->
